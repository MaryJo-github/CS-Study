# 프로그래밍 패러다임

**개발 방법론**

ex. 예시

- 객체지향 프로그래밍: 프로그래머들이 상호 작용하는 객체들의 집합으로 볼 수 있게 함
- 함수형 프로그래밍: 상태 값을 지니지 않는 함수 값들의 연속으로 생각할 수 있게 함

**프로그래밍 패러다임의 분류**

- 선언형
    - 함수형
- 명령형
    - 객체지향형
    - 절차지향형

## 선언형과 함수형 프로그래밍

### 선언형 프로그래밍(declarative programming)

- **‘무엇을’** 풀어내는가에 집중하는 패러다임
- “프로그램은 함수로 이루어진 것이다.” 라는 명제가 담겨있는 패러다임
- 명령형 프로그래밍과 달리 ‘궁극적인 목적 자체’와 관련이 있기 때문에 목적이 동일한 다른 프로그램에서도 사용할 수 있음

### 함수형 프로그래밍(functional programming)

- 프로그램이 상태의 변화 없이 데이터 처리를 수학적 함수 계산으로 취급하고자하는 패러다임
- `순수 함수`들을 블록처럼 쌓아 로직을 구현하고 `고차 함수`를 통해 재사용성을 높인 프로그래밍 패러다임

### * **순수 함수**

- 출력이 입력에만 의존하는 것
- 함수의 실행은 프로그램의 실행에 영향을 미치지 않아야 함
- 동일한 입력에는 항상 같은 값을 반환
- A라는 기능을 구현하는 순수함수가 있다면 해당 기능 외의 side effect가 없어야함

### * **고차 함수**

- 함수가 함수를 값처럼 매개변수로 받아 로직을 생성할 수 있는 것
- 고차 함수를 쓰기 위해서는 언어가 `일급 객체`이어야 함

### * 일급 객체

- 변수나 메서드에 함수를 할당할 수 있다
- 함수 안에 함수를 매개변수로 담을 수 있다
- 함수가 함수를 반환할 수 있다

## 명령형 프로그래밍

- ‘어떻게’ 풀어내는가에 집중하는 패러다임
- ‘어떤 목적을 성취하기 위해서 사용되는 단계 중에 하나’이기 때문에 현재 컨텍스트에 의존적. 다른 프로그램에서 사용하기 어려움

### 객체지향 프로그래밍 (OOP, Object-Oriented Programming)

- 객체들의 집합으로 프로그램의 상호 작용을 표현하며 데이터를 객체로 취급하여 객체 내부에 선언된 메서드를 활용하는 방식
- 설계에 많은 시간이 소요되며 처리 속도가 다른 프로그래밍 패러다임에 비해 상대적으로 느림
- 특징
    - 추상화
        - 복잡한 시스템으로부터 핵심적인 개념 또는 기능을 간추려내는 것
        - ex. 사람의 특징: 나이, 성별, 자산, 직업, 취미, 좋아하는 음식, 좋아하는 색깔 등
        → 필요한 특성만 추려내기 (나이, 성별, 직업)
    - 캡슐화
        - 객체의 속성과 메서드를 하나로 묶고 일부를 외부에 감추어 은닉하는 것
    - 상속성
        - 상위 클래스의 특성을 하위 클래스가 이어받아서 재사용하거나 추가, 확장하는 것
        - 코드의 재사용 측면, 계층적인 관계 생성, 유지 보수성 측면에서 중요
    - 다형성
        - 하나의 메서드나 클래스가 다양한 방법으로 동작하는 것
        - 오버로딩, 오버라이딩 등이 있음
            - 오버로딩(overloading): 같은 이름을 가진 메서드를 여러 개 두는 것. 컴파일 중에 발생하는 **정적** 다형성
            - 오버라이딩(overriding): 상위 클래스로부터 상속받은 메서드를 하위 클래스가 재정의하는 것. 런타임 중에 발생하는 **동적** 다형성
- 설계 원칙: **SOLID**
    - SRP (Single Responsibility Principle)
        - 모든 클래스는 각각 하나의 책임만 가져야 하는 원칙
        - A라는 로직이 존재한다면 어떠한 클래스는 A에 관한 클래스여야하고, 이를 수정한다고 했을 때에도 A와 관련된 수정이어야 함
    - OCP (Open Closed Principle)
        - 유지 보수 사항이 생긴다면 코드를 쉽게 확장할 수 있도록 하고 수정할 때는 닫혀 있어야 하는 원칙
        - 기존의 코드는 잘 변경하지 않으면서도 확장은 쉽게 할 수 있어야 함
    - LSP (Liskov Substitution Principle)
        - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 함
        - 부모 객체에 자식 객체를 넣어도 시스템이 문제없이 실행되어야 함
    - ISP (Interface Segregation Principle)
        - 하나의 일반적인 인터페이스보다 구체적인 여러 개의 인터페이스를 만들어야 하는 원칙
    - DIP (Dependency Inversion Principle)
        - 자신보다 변하기 쉬운 것에 의존하던 것을 추상화된 인터페이스나 상위 클래스를 두어 변하기 쉬운 것의 변화에 영향받지 않게 하는 원칙
        - 상위 계층은 하위 계층의 변화에 대한 구현으로부터 독립해야 함

### 절차형 프로그래밍

- 로직이 수행되어야 할 연속적인 계산 과정으로 이루어져있음
- 장점
    - 코드의 가독성이 좋으며 실행 속도가 빠름
    - 계산이 많은 작업에서 유용
- 단점
    - 모듈화하기가 어렵고 유지 보수성이 떨어짐

## 패러다임의 혼합

- **비즈니스 로직**이나 **서비스의 특징**을 고려해서 패러다임을 정하는 것이 좋음
- 하나의 패러다임을 기반으로 통일하여 서비스를 구축하는 것도 좋지만, 여러 패러다임을 조합하여 상황과 맥락에 따라 패러다임 간의 장점만 취해 개발하는 것이 좋음
